export type ChangeType = "add" | "same" | "remove"

interface ChangeElement {
  content: string,
  type: ChangeType
}
const changes: Array<Array<ChangeElement>> = [[{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n","type":"same"},{"content":"console.log(binarySearch([1, 2, 3, 4, 5, 6, 7], 6));","type":"remove"},{"content":"console.log(binarySearch([1, 2, 3, 4, 5, 6, 7], 10));","type":"add"},{"content":"","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n","type":"same"},{"content":"console.log(binarySearch([1, 2, 3, 4, 5, 6, 7], 10));","type":"remove"},{"content":"function randInt(n) {\n    Math.random() * n\n}","type":"add"},{"content":"","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {","type":"same"},{"content":"    Math.random() * n","type":"remove"},{"content":"    Math.floor(Math.random() * n)","type":"add"},{"content":"}\n","type":"same"},{"content":"function randArray(length, n) {\n    const arr = []\n    for (let i = 0; i < length; i++) {\n\tarr.push(randInt(n));\n    }\n    return arr;\n}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);\n    const n = randInt(100);\n    console.log(``)\n}\n\n","type":"add"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {\n    const arr = []\n    for (let i = 0; i < length; i++) {\n\tarr.push(randInt(n));\n    }\n    return arr;\n}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);\n    const n = randInt(100);","type":"same"},{"content":"    console.log(``)","type":"remove"},{"content":"    console.log(`Finding ${} in ${}`)","type":"add"},{"content":"}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {\n    const arr = []\n    for (let i = 0; i < length; i++) {\n\tarr.push(randInt(n));\n    }\n    return arr;\n}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);\n    const n = randInt(100);","type":"same"},{"content":"    console.log(`Finding ${} in ${}`)","type":"remove"},{"content":"    console.log(`Finding ${n} in ${arr}`);\n    console.log(binarySearch(arr, n))","type":"add"},{"content":"}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {\n    const arr = []\n    for (let i = 0; i < length; i++) {\n\tarr.push(randInt(n));","type":"same"},{"content":"\tconsole.log(arr);","type":"add"},{"content":"    }\n    return arr;\n}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);\n    const n = randInt(100);\n    console.log(`Finding ${n} in ${arr}`);\n    console.log(binarySearch(arr, n))\n}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {","type":"same"},{"content":"    Math.floor(Math.random() * n)","type":"remove"},{"content":"    return Math.floor(Math.random() * n)","type":"add"},{"content":"}\n\nfunction randArray(length, n) {\n    const arr = []\n    for (let i = 0; i < length; i++) {\n\tarr.push(randInt(n));","type":"same"},{"content":"\tconsole.log(arr);","type":"remove"},{"content":"    }\n    return arr;\n}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);\n    const n = randInt(100);\n    console.log(`Finding ${n} in ${arr}`);\n    console.log(binarySearch(arr, n))\n}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    return Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {\n    const arr = []\n    for (let i = 0; i < length; i++) {\n\tarr.push(randInt(n));\n    }\n    return arr;\n}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);","type":"same"},{"content":"    const n = randInt(100);\n    console.log(`Finding ${n} in ${arr}`);\n    console.log(binarySearch(arr, n))","type":"remove"},{"content":"    const n = randInt(10);\n    console.log(`Finding ${arr[n]} in ${arr} (expected ${n})`);\n    console.log(binarySearch(arr, arr[n]))","type":"add"},{"content":"}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    return Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {\n    const arr = []\n    for (let i = 0; i < length; i++) {\n\tarr.push(randInt(n));\n    }\n    return arr;\n}\n\nfor (let i = 0; i < 10; i++) {","type":"same"},{"content":"    const arr = randArray(10, 100);","type":"remove"},{"content":"    const arr = randArray(10, 100).sort((a, b) => a > b);","type":"add"},{"content":"    const n = randInt(10);\n    console.log(`Finding ${arr[n]} in ${arr} (expected ${n})`);\n    console.log(binarySearch(arr, arr[n]))\n}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    return Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {\n    const arr = []\n    for (let i = 0; i < length; i++) {\n\tarr.push(randInt(n));\n    }\n    return arr;\n}\n\nfor (let i = 0; i < 10; i++) {","type":"same"},{"content":"    const arr = randArray(10, 100).sort((a, b) => a > b);","type":"remove"},{"content":"    const arr = randArray(10, 100);\n    arr.sort((a, b) => a > b);","type":"add"},{"content":"    const n = randInt(10);\n    console.log(`Finding ${arr[n]} in ${arr} (expected ${n})`);\n    console.log(binarySearch(arr, arr[n]))\n}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    return Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {\n    const arr = []\n    for (let i = 0; i < length; i++) {\n\tarr.push(randInt(n));\n    }\n    return arr;\n}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);\n    arr.sort((a, b) => a > b);","type":"same"},{"content":"    console.log(arr);","type":"add"},{"content":"    const n = randInt(10);\n    console.log(`Finding ${arr[n]} in ${arr} (expected ${n})`);\n    console.log(binarySearch(arr, arr[n]))\n}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    return Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {\n    const arr = []\n    for (let i = 0; i < length; i++) {\n\tarr.push(randInt(n));\n    }\n    return arr;\n}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);","type":"same"},{"content":"    arr.sort((a, b) => a > b);","type":"remove"},{"content":"    arr.sort((a, b) => {\n\tif (a > b) {\n\t    return 1;\n\t}\n\tif (a < b) {\n\t    return -1;\n\t}\n\treturn 0\n    });","type":"add"},{"content":"    console.log(arr);\n    const n = randInt(10);\n    console.log(`Finding ${arr[n]} in ${arr} (expected ${n})`);\n    console.log(binarySearch(arr, arr[n]))\n}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    return Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {\n    const arr = []\n    for (let i = 0; i < length; i++) {\n\tarr.push(randInt(n));\n    }\n    return arr;\n}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);\n    arr.sort((a, b) => {\n\tif (a > b) {\n\t    return 1;\n\t}\n\tif (a < b) {\n\t    return -1;\n\t}\n\treturn 0\n    });\n    console.log(arr);\n    const n = randInt(10);\n    console.log(`Finding ${arr[n]} in ${arr} (expected ${n})`);","type":"same"},{"content":"    console.log(binarySearch(arr, arr[n]))","type":"remove"},{"content":"    if (n === binarySearch(arr, arr[n])) {\n\tthrow new Error(\"Wrong output!\")\n    }","type":"add"},{"content":"}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    return Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {\n    const arr = []\n    for (let i = 0; i < length; i++) {\n\tarr.push(randInt(n));\n    }\n    return arr;\n}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);\n    arr.sort((a, b) => {\n\tif (a > b) {\n\t    return 1;\n\t}\n\tif (a < b) {\n\t    return -1;\n\t}\n\treturn 0\n    });\n    console.log(arr);\n    const n = randInt(10);\n    console.log(`Finding ${arr[n]} in ${arr} (expected ${n})`);","type":"same"},{"content":"    if (n === binarySearch(arr, arr[n])) {","type":"remove"},{"content":"    if (n !== binarySearch(arr, arr[n])) {","type":"add"},{"content":"\tthrow new Error(\"Wrong output!\")\n    }\n}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    return Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {\n    const arr = []\n    for (let i = 0; i < length; i++) {\n\tarr.push(randInt(n));\n    }\n    return arr;\n}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);\n    arr.sort((a, b) => {\n\tif (a > b) {\n\t    return 1;\n\t}\n\tif (a < b) {\n\t    return -1;\n\t}\n\treturn 0\n    });\n    console.log(arr);\n    const n = randInt(10);\n    console.log(`Finding ${arr[n]} in ${arr} (expected ${n})`);","type":"same"},{"content":"    if (n !== binarySearch(arr, arr[n])) {\n\tthrow new Error(\"Wrong output!\")","type":"remove"},{"content":"    const out = binarySearch(arr, arr[n])\n    if (n !== out) {\n\tthrow new Error(`Wrong output! Expected ${n} got ${out}`)","type":"add"},{"content":"    }\n}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    return Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {\n    const arr = []\n    for (let i = 0; i < length; i++) {\n\tarr.push(randInt(n));\n    }\n    return arr;\n}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);\n    arr.sort((a, b) => {\n\tif (a > b) {\n\t    return 1;\n\t}\n\tif (a < b) {\n\t    return -1;\n\t}\n\treturn 0\n    });","type":"same"},{"content":"    console.log(arr);","type":"remove"},{"content":"    const n = randInt(10);\n    console.log(`Finding ${arr[n]} in ${arr} (expected ${n})`);\n    const out = binarySearch(arr, arr[n])\n    if (n !== out) {\n\tthrow new Error(`Wrong output! Expected ${n} got ${out}`)\n    }\n}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    return Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {\n    const arr = []\n    for (let i = 0; i < length; i++) {\n\tarr.push(randInt(n));\n    }\n    return arr;\n}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);\n    arr.sort((a, b) => {\n\tif (a > b) {\n\t    return 1;\n\t}\n\tif (a < b) {\n\t    return -1;\n\t}\n\treturn 0\n    });\n    const n = randInt(10);\n    console.log(`Finding ${arr[n]} in ${arr} (expected ${n})`);\n    const out = binarySearch(arr, arr[n])\n    if (n !== out) {\n\tthrow new Error(`Wrong output! Expected ${n} got ${out}`)","type":"same"},{"content":"    } else {\n\tconsole.log(out);","type":"add"},{"content":"    }\n}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    return Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {","type":"same"},{"content":"    const arr = []","type":"remove"},{"content":"    const arr = new Set()","type":"add"},{"content":"    for (let i = 0; i < length; i++) {","type":"same"},{"content":"\tarr.push(randInt(n));","type":"remove"},{"content":"\tlet val = randInt(n)\n\twhile arr.has(val) {\n\t    val = randInt(n)\n\t}\n\tarr.add(val)","type":"add"},{"content":"    }\n    return arr;\n}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);\n    arr.sort((a, b) => {\n\tif (a > b) {\n\t    return 1;\n\t}\n\tif (a < b) {\n\t    return -1;\n\t}\n\treturn 0\n    });\n    const n = randInt(10);\n    console.log(`Finding ${arr[n]} in ${arr} (expected ${n})`);\n    const out = binarySearch(arr, arr[n])\n    if (n !== out) {\n\tthrow new Error(`Wrong output! Expected ${n} got ${out}`)\n    } else {\n\tconsole.log(out);\n    }\n}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    return Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {\n    const arr = new Set()\n    for (let i = 0; i < length; i++) {\n\tlet val = randInt(n)\n\twhile arr.has(val) {\n\t    val = randInt(n)\n\t}\n\tarr.add(val)\n    }","type":"same"},{"content":"    return arr;","type":"remove"},{"content":"    return Array.from(arr);","type":"add"},{"content":"}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);\n    arr.sort((a, b) => {\n\tif (a > b) {\n\t    return 1;\n\t}\n\tif (a < b) {\n\t    return -1;\n\t}\n\treturn 0\n    });\n    const n = randInt(10);\n    console.log(`Finding ${arr[n]} in ${arr} (expected ${n})`);\n    const out = binarySearch(arr, arr[n])\n    if (n !== out) {\n\tthrow new Error(`Wrong output! Expected ${n} got ${out}`)\n    } else {\n\tconsole.log(out);\n    }\n}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    return Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {\n    const arr = new Set()\n    for (let i = 0; i < length; i++) {\n\tlet val = randInt(n)\n\twhile arr.has(val) {\n\t    val = randInt(n)\n\t}","type":"same"},{"content":"\tconsole.log(arr);","type":"add"},{"content":"\tarr.add(val)\n    }\n    return Array.from(arr);\n}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);\n    arr.sort((a, b) => {\n\tif (a > b) {\n\t    return 1;\n\t}\n\tif (a < b) {\n\t    return -1;\n\t}\n\treturn 0\n    });\n    const n = randInt(10);\n    console.log(`Finding ${arr[n]} in ${arr} (expected ${n})`);\n    const out = binarySearch(arr, arr[n])\n    if (n !== out) {\n\tthrow new Error(`Wrong output! Expected ${n} got ${out}`)\n    } else {\n\tconsole.log(out);\n    }\n}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    return Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {\n    const arr = new Set()\n    for (let i = 0; i < length; i++) {","type":"same"},{"content":"\tconsole.log(\"1\");","type":"add"},{"content":"\tlet val = randInt(n)\n\twhile arr.has(val) {\n\t    val = randInt(n)\n\t}","type":"same"},{"content":"\tconsole.log(arr);","type":"remove"},{"content":"\tarr.add(val)\n    }\n    return Array.from(arr);\n}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);\n    arr.sort((a, b) => {\n\tif (a > b) {\n\t    return 1;\n\t}\n\tif (a < b) {\n\t    return -1;\n\t}\n\treturn 0\n    });\n    const n = randInt(10);\n    console.log(`Finding ${arr[n]} in ${arr} (expected ${n})`);\n    const out = binarySearch(arr, arr[n])\n    if (n !== out) {\n\tthrow new Error(`Wrong output! Expected ${n} got ${out}`)\n    } else {\n\tconsole.log(out);\n    }\n}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    return Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {\n    const arr = new Set()\n    for (let i = 0; i < length; i++) {","type":"same"},{"content":"\tconsole.log(\"1\");","type":"remove"},{"content":"\tlet val = randInt(n)","type":"same"},{"content":"\twhile arr.has(val) {","type":"remove"},{"content":"\twhile (arr.has(val)) {","type":"add"},{"content":"\t    val = randInt(n)\n\t}\n\tarr.add(val)\n    }\n    return Array.from(arr);\n}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);\n    arr.sort((a, b) => {\n\tif (a > b) {\n\t    return 1;\n\t}\n\tif (a < b) {\n\t    return -1;\n\t}\n\treturn 0\n    });\n    const n = randInt(10);\n    console.log(`Finding ${arr[n]} in ${arr} (expected ${n})`);\n    const out = binarySearch(arr, arr[n])\n    if (n !== out) {\n\tthrow new Error(`Wrong output! Expected ${n} got ${out}`)\n    } else {\n\tconsole.log(out);\n    }\n}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }","type":"same"},{"content":"    if (value === list[left]) {\n\treturn left;\n    }\n    if (value === list[right]) {\n\treturn \n    }","type":"add"},{"content":"    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    return Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {\n    const arr = new Set()\n    for (let i = 0; i < length; i++) {\n\tlet val = randInt(n)\n\twhile (arr.has(val)) {\n\t    val = randInt(n)\n\t}\n\tarr.add(val)\n    }\n    return Array.from(arr);\n}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);\n    arr.sort((a, b) => {\n\tif (a > b) {\n\t    return 1;\n\t}\n\tif (a < b) {\n\t    return -1;\n\t}\n\treturn 0\n    });\n    const n = randInt(10);\n    console.log(`Finding ${arr[n]} in ${arr} (expected ${n})`);\n    const out = binarySearch(arr, arr[n])\n    if (n !== out) {\n\tthrow new Error(`Wrong output! Expected ${n} got ${out}`)\n    } else {\n\tconsole.log(out);\n    }\n}\n\n","type":"same"}],
  [{"content":"function binarySearch(list, value, left = 0, right = list.length - 1) {\n    if (value > list[right] || value < list[left]) {\n\treturn -1;\n    }\n    if (value === list[left]) {\n\treturn left;\n    }\n    if (value === list[right]) {","type":"same"},{"content":"\treturn ","type":"remove"},{"content":"\treturn right;","type":"add"},{"content":"    }\n    const mid = Math.floor((left + right)/2);\n    if (value === list[mid]) {\n\treturn mid;\n    }\n    if (mid == left || mid == right) {\n\treturn -1;\n    }\n    if (list[mid] > value) {\n\treturn binarySearch(list, value, left, mid);\n    } else {\n\treturn binarySearch(list, value, mid, right);\n    }\n}\n\nfunction randInt(n) {\n    return Math.floor(Math.random() * n)\n}\n\nfunction randArray(length, n) {\n    const arr = new Set()\n    for (let i = 0; i < length; i++) {\n\tlet val = randInt(n)\n\twhile (arr.has(val)) {\n\t    val = randInt(n)\n\t}\n\tarr.add(val)\n    }\n    return Array.from(arr);\n}\n\nfor (let i = 0; i < 10; i++) {\n    const arr = randArray(10, 100);\n    arr.sort((a, b) => {\n\tif (a > b) {\n\t    return 1;\n\t}\n\tif (a < b) {\n\t    return -1;\n\t}\n\treturn 0\n    });\n    const n = randInt(10);\n    console.log(`Finding ${arr[n]} in ${arr} (expected ${n})`);\n    const out = binarySearch(arr, arr[n])\n    if (n !== out) {\n\tthrow new Error(`Wrong output! Expected ${n} got ${out}`)\n    } else {\n\tconsole.log(out);\n    }\n}\n\n","type":"same"}],
]

export default changes;