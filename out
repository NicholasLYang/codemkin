[[{"content":"extern crate difference;\nextern crate tokio;\nextern crate serde_json;\n\nuse difference::{Changeset, Difference};\nuse tokio::time;\nuse std::time::Duration;\nuse serde_json::json;\nuse std::{fs};\nuse std::fs::OpenOptions;\nuse std::io::Write;\n\n\nfn diffs_to_json(diffs: &Vec<Difference>) -> String {\n    let mut values = Vec::new();\n    for diff in diffs {\n        let (type_ , content)= match diff {\n            Difference::Add(c) => (\"add\", c),\n            Difference::Rem(c) => (\"remove\", c),\n            Difference::Same(c) => (\"same\", c)\n        };\n        let val = json!({\n           \"type\": type_,\n           \"content\": content\n        });\n        values.push(val.to_string());\n    }\n    format!(\"[{}]\", values.join(\",\"))\n}\n\n#[tokio::main]\nasync fn main() {","type":"same"},{"content":"    let mut interval = time::interval(Duration::from_millis(500));","type":"remove"},{"content":"    let mut interval = time::interval(Duration::from_millis(1000));","type":"add"},{"content":"    let mut previous_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n    let mut out_file = OpenOptions::new().write(true).append(true).create(true).open(\"out\").unwrap();\n\n    loop {\n        interval.tick().await;\n        let current_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n        let changeset = Changeset::new(&previous_contents, &current_contents, \"\\n\");\n        if changeset.distance > 0 {\n            writeln!(out_file, \"{}\", diffs_to_json(&changeset.diffs));\n        }\n        previous_contents = current_contents;\n    }\n}\n","type":"same"}],
[{"content":"extern crate difference;\nextern crate tokio;\nextern crate serde_json;\n\nuse difference::{Changeset, Difference};\nuse tokio::time;\nuse std::time::Duration;\nuse serde_json::json;\nuse std::{fs};\nuse std::fs::OpenOptions;\nuse std::io::Write;\n","type":"same"},{"content":"struct Diff(Difference);","type":"add"},{"content":"\nfn diffs_to_json(diffs: &Vec<Difference>) -> String {\n    let mut values = Vec::new();\n    for diff in diffs {\n        let (type_ , content)= match diff {\n            Difference::Add(c) => (\"add\", c),\n            Difference::Rem(c) => (\"remove\", c),\n            Difference::Same(c) => (\"same\", c)\n        };\n        let val = json!({\n           \"type\": type_,\n           \"content\": content\n        });\n        values.push(val.to_string());\n    }\n    format!(\"[{}]\", values.join(\",\"))\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut interval = time::interval(Duration::from_millis(1000));\n    let mut previous_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n    let mut out_file = OpenOptions::new().write(true).append(true).create(true).open(\"out\").unwrap();\n\n    loop {\n        interval.tick().await;\n        let current_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n        let changeset = Changeset::new(&previous_contents, &current_contents, \"\\n\");\n        if changeset.distance > 0 {\n            writeln!(out_file, \"{}\", diffs_to_json(&changeset.diffs));\n        }\n        previous_contents = current_contents;\n    }\n}\n","type":"same"}],
[{"content":"extern crate difference;\nextern crate tokio;\nextern crate serde_json;\n\nuse difference::{Changeset, Difference};\nuse tokio::time;\nuse std::time::Duration;\nuse serde_json::json;\nuse std::{fs};\nuse std::fs::OpenOptions;\nuse std::io::Write;\n\nstruct Diff(Difference);\n","type":"same"},{"content":"impl \n","type":"add"},{"content":"fn diffs_to_json(diffs: &Vec<Difference>) -> String {\n    let mut values = Vec::new();\n    for diff in diffs {\n        let (type_ , content)= match diff {\n            Difference::Add(c) => (\"add\", c),\n            Difference::Rem(c) => (\"remove\", c),\n            Difference::Same(c) => (\"same\", c)\n        };\n        let val = json!({\n           \"type\": type_,\n           \"content\": content\n        });\n        values.push(val.to_string());\n    }\n    format!(\"[{}]\", values.join(\",\"))\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut interval = time::interval(Duration::from_millis(1000));\n    let mut previous_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n    let mut out_file = OpenOptions::new().write(true).append(true).create(true).open(\"out\").unwrap();\n\n    loop {\n        interval.tick().await;\n        let current_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n        let changeset = Changeset::new(&previous_contents, &current_contents, \"\\n\");\n        if changeset.distance > 0 {\n            writeln!(out_file, \"{}\", diffs_to_json(&changeset.diffs));\n        }\n        previous_contents = current_contents;\n    }\n}\n","type":"same"}],
[{"content":"extern crate difference;\nextern crate tokio;\nextern crate serde_json;\n\nuse difference::{Changeset, Difference};\nuse tokio::time;\nuse std::time::Duration;\nuse serde_json::json;\nuse std::{fs};\nuse std::fs::OpenOptions;\nuse std::io::Write;\n\nstruct Diff(Difference);\n","type":"same"},{"content":"impl \n","type":"remove"},{"content":"fn diffs_to_json(diffs: &Vec<Difference>) -> String {\n    let mut values = Vec::new();\n    for diff in diffs {\n        let (type_ , content)= match diff {\n            Difference::Add(c) => (\"add\", c),\n            Difference::Rem(c) => (\"remove\", c),\n            Difference::Same(c) => (\"same\", c)\n        };\n        let val = json!({\n           \"type\": type_,\n           \"content\": content\n        });\n        values.push(val.to_string());\n    }\n    format!(\"[{}]\", values.join(\",\"))\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut interval = time::interval(Duration::from_millis(1000));\n    let mut previous_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n    let mut out_file = OpenOptions::new().write(true).append(true).create(true).open(\"out\").unwrap();\n\n    loop {\n        interval.tick().await;\n        let current_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n        let changeset = Changeset::new(&previous_contents, &current_contents, \"\\n\");\n        if changeset.distance > 0 {\n            writeln!(out_file, \"{}\", diffs_to_json(&changeset.diffs));\n        }\n        previous_contents = current_contents;\n    }\n}\n","type":"same"}],
[{"content":"extern crate difference;\nextern crate tokio;\nextern crate serde_json;","type":"same"},{"content":"extern crate crono","type":"add"},{"content":"\nuse difference::{Changeset, Difference};\nuse tokio::time;\nuse std::time::Duration;\nuse serde_json::json;\nuse std::{fs};\nuse std::fs::OpenOptions;\nuse std::io::Write;\n\nstruct Diff(Difference);\n\nfn diffs_to_json(diffs: &Vec<Difference>) -> String {\n    let mut values = Vec::new();\n    for diff in diffs {\n        let (type_ , content)= match diff {\n            Difference::Add(c) => (\"add\", c),\n            Difference::Rem(c) => (\"remove\", c),\n            Difference::Same(c) => (\"same\", c)\n        };\n        let val = json!({\n           \"type\": type_,\n           \"content\": content\n        });\n        values.push(val.to_string());\n    }\n    format!(\"[{}]\", values.join(\",\"))\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut interval = time::interval(Duration::from_millis(1000));\n    let mut previous_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n    let mut out_file = OpenOptions::new().write(true).append(true).create(true).open(\"out\").unwrap();\n\n    loop {\n        interval.tick().await;\n        let current_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n        let changeset = Changeset::new(&previous_contents, &current_contents, \"\\n\");\n        if changeset.distance > 0 {\n            writeln!(out_file, \"{}\", diffs_to_json(&changeset.diffs));\n        }\n        previous_contents = current_contents;\n    }\n}\n","type":"same"}],
[{"content":"extern crate difference;\nextern crate tokio;\nextern crate serde_json;","type":"same"},{"content":"extern crate crono","type":"remove"},{"content":"extern crate chrono;","type":"add"},{"content":"\nuse difference::{Changeset, Difference};\nuse tokio::time;\nuse std::time::Duration;\nuse serde_json::json;\nuse std::{fs};\nuse std::fs::OpenOptions;\nuse std::io::Write;\n\nstruct Diff(Difference);\n\nfn diffs_to_json(diffs: &Vec<Difference>) -> String {\n    let mut values = Vec::new();\n    for diff in diffs {\n        let (type_ , content)= match diff {\n            Difference::Add(c) => (\"add\", c),\n            Difference::Rem(c) => (\"remove\", c),\n            Difference::Same(c) => (\"same\", c)\n        };\n        let val = json!({\n           \"type\": type_,\n           \"content\": content\n        });\n        values.push(val.to_string());\n    }\n    format!(\"[{}]\", values.join(\",\"))\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut interval = time::interval(Duration::from_millis(1000));\n    let mut previous_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n    let mut out_file = OpenOptions::new().write(true).append(true).create(true).open(\"out\").unwrap();\n\n    loop {\n        interval.tick().await;\n        let current_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n        let changeset = Changeset::new(&previous_contents, &current_contents, \"\\n\");\n        if changeset.distance > 0 {\n            writeln!(out_file, \"{}\", diffs_to_json(&changeset.diffs));\n        }\n        previous_contents = current_contents;\n    }\n}\n","type":"same"}],
[{"content":"extern crate difference;\nextern crate tokio;\nextern crate serde_json;\nextern crate chrono;\n","type":"same"},{"content":"use chrono::{Utc};","type":"add"},{"content":"use difference::{Changeset, Difference};\nuse tokio::time;\nuse std::time::Duration;\nuse serde_json::json;\nuse std::{fs};\nuse std::fs::OpenOptions;\nuse std::io::Write;\n\nstruct Diff(Difference);\n\nfn diffs_to_json(diffs: &Vec<Difference>) -> String {\n    let mut values = Vec::new();\n    for diff in diffs {\n        let (type_ , content)= match diff {\n            Difference::Add(c) => (\"add\", c),\n            Difference::Rem(c) => (\"remove\", c),\n            Difference::Same(c) => (\"same\", c)\n        };\n        let val = json!({\n           \"type\": type_,\n           \"content\": content\n        });\n        values.push(val.to_string());\n    }\n    format!(\"[{}]\", values.join(\",\"))\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut interval = time::interval(Duration::from_millis(1000));\n    let mut previous_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n    let mut out_file = OpenOptions::new().write(true).append(true).create(true).open(\"out\").unwrap();\n\n    loop {\n        interval.tick().await;\n        let current_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n        let changeset = Changeset::new(&previous_contents, &current_contents, \"\\n\");\n        if changeset.distance > 0 {\n            writeln!(out_file, \"{}\", diffs_to_json(&changeset.diffs));\n        }\n        previous_contents = current_contents;\n    }\n}\n","type":"same"}],
[{"content":"extern crate chrono;","type":"add"},{"content":"extern crate difference;","type":"same"},{"content":"extern crate serde_json;","type":"add"},{"content":"extern crate tokio;","type":"same"},{"content":"extern crate serde_json;\nextern crate chrono;","type":"remove"},{"content":"","type":"same"},{"content":"use chrono::{Utc};","type":"remove"},{"content":"use chrono::Utc;","type":"add"},{"content":"use difference::{Changeset, Difference};","type":"same"},{"content":"use tokio::time;\nuse std::time::Duration;","type":"remove"},{"content":"use serde_json::json;","type":"same"},{"content":"use std::{fs};","type":"remove"},{"content":"use std::fs;","type":"add"},{"content":"use std::fs::OpenOptions;\nuse std::io::Write;","type":"same"},{"content":"use std::time::Duration;\nuse tokio::time;","type":"add"},{"content":"\nstruct Diff(Difference);\n\nfn diffs_to_json(diffs: &Vec<Difference>) -> String {\n    let mut values = Vec::new();\n    for diff in diffs {","type":"same"},{"content":"        let (type_ , content)= match diff {","type":"remove"},{"content":"        let (type_, content) = match diff {","type":"add"},{"content":"            Difference::Add(c) => (\"add\", c),\n            Difference::Rem(c) => (\"remove\", c),","type":"same"},{"content":"            Difference::Same(c) => (\"same\", c)","type":"remove"},{"content":"            Difference::Same(c) => (\"same\", c),","type":"add"},{"content":"        };\n        let val = json!({\n           \"type\": type_,\n           \"content\": content\n        });\n        values.push(val.to_string());\n    }\n    format!(\"[{}]\", values.join(\",\"))\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut interval = time::interval(Duration::from_millis(1000));\n    let mut previous_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");","type":"same"},{"content":"    let mut out_file = OpenOptions::new().write(true).append(true).create(true).open(\"out\").unwrap();","type":"remove"},{"content":"    let mut out_file = OpenOptions::new()\n        .write(true)\n        .append(true)\n        .create(true)\n        .open(\"out\")\n        .unwrap();","type":"add"},{"content":"\n    loop {\n        interval.tick().await;\n        let current_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n        let changeset = Changeset::new(&previous_contents, &current_contents, \"\\n\");\n        if changeset.distance > 0 {\n            writeln!(out_file, \"{}\", diffs_to_json(&changeset.diffs));\n        }\n        previous_contents = current_contents;\n    }\n}\n","type":"same"}],
[{"content":"extern crate chrono;\nextern crate difference;\nextern crate serde_json;\nextern crate tokio;\n\nuse chrono::Utc;\nuse difference::{Changeset, Difference};\nuse serde_json::json;\nuse std::fs;\nuse std::fs::OpenOptions;\nuse std::io::Write;\nuse std::time::Duration;\nuse tokio::time;\n\nstruct Diff(Difference);\n\nfn diffs_to_json(diffs: &Vec<Difference>) -> String {\n    let mut values = Vec::new();\n    for diff in diffs {\n        let (type_, content) = match diff {\n            Difference::Add(c) => (\"add\", c),\n            Difference::Rem(c) => (\"remove\", c),\n            Difference::Same(c) => (\"same\", c),\n        };\n        let val = json!({\n           \"type\": type_,\n           \"content\": content\n        });\n        values.push(val.to_string());\n    }\n    format!(\"[{}]\", values.join(\",\"))\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut interval = time::interval(Duration::from_millis(1000));\n    let mut previous_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");","type":"same"},{"content":"    let out_filename = format!(\"{}\", Utc::now())","type":"add"},{"content":"    let mut out_file = OpenOptions::new()\n        .write(true)\n        .append(true)\n        .create(true)","type":"same"},{"content":"        .open(\"out\")","type":"remove"},{"content":"        .open()","type":"add"},{"content":"        .unwrap();\n\n    loop {\n        interval.tick().await;\n        let current_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n        let changeset = Changeset::new(&previous_contents, &current_contents, \"\\n\");\n        if changeset.distance > 0 {\n            writeln!(out_file, \"{}\", diffs_to_json(&changeset.diffs));\n        }\n        previous_contents = current_contents;\n    }\n}\n","type":"same"}],
[{"content":"extern crate chrono;\nextern crate difference;\nextern crate serde_json;\nextern crate tokio;\n\nuse chrono::Utc;\nuse difference::{Changeset, Difference};\nuse serde_json::json;\nuse std::fs;\nuse std::fs::OpenOptions;\nuse std::io::Write;\nuse std::time::Duration;\nuse tokio::time;\n\nstruct Diff(Difference);\n\nfn diffs_to_json(diffs: &Vec<Difference>) -> String {\n    let mut values = Vec::new();\n    for diff in diffs {\n        let (type_, content) = match diff {\n            Difference::Add(c) => (\"add\", c),\n            Difference::Rem(c) => (\"remove\", c),\n            Difference::Same(c) => (\"same\", c),\n        };\n        let val = json!({\n           \"type\": type_,\n           \"content\": content\n        });\n        values.push(val.to_string());\n    }\n    format!(\"[{}]\", values.join(\",\"))\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut interval = time::interval(Duration::from_millis(1000));\n    let mut previous_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");","type":"same"},{"content":"    let out_filename = format!(\"{}\", Utc::now())","type":"remove"},{"content":"    let out_filename = format!(\"{}\", Utc::now());","type":"add"},{"content":"    let mut out_file = OpenOptions::new()\n        .write(true)\n        .append(true)\n        .create(true)","type":"same"},{"content":"        .open()","type":"remove"},{"content":"        .open(out_filename)","type":"add"},{"content":"        .unwrap();\n\n    loop {\n        interval.tick().await;\n        let current_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n        let changeset = Changeset::new(&previous_contents, &current_contents, \"\\n\");\n        if changeset.distance > 0 {\n            writeln!(out_file, \"{}\", diffs_to_json(&changeset.diffs));\n        }\n        previous_contents = current_contents;\n    }\n}\n","type":"same"}],
[{"content":"extern crate chrono;\nextern crate difference;\nextern crate serde_json;\nextern crate tokio;\n\nuse chrono::Utc;\nuse difference::{Changeset, Difference};\nuse serde_json::json;\nuse std::fs;\nuse std::fs::OpenOptions;\nuse std::io::Write;\nuse std::time::Duration;\nuse tokio::time;\n","type":"same"},{"content":"struct Diff(Difference);\n","type":"remove"},{"content":"fn diffs_to_json(diffs: &Vec<Difference>) -> String {\n    let mut values = Vec::new();\n    for diff in diffs {\n        let (type_, content) = match diff {\n            Difference::Add(c) => (\"add\", c),\n            Difference::Rem(c) => (\"remove\", c),\n            Difference::Same(c) => (\"same\", c),\n        };\n        let val = json!({\n           \"type\": type_,\n           \"content\": content\n        });\n        values.push(val.to_string());\n    }\n    format!(\"[{}]\", values.join(\",\"))\n}\n\n#[tokio::main]","type":"same"},{"content":"async fn main() {","type":"remove"},{"content":"async fn main() -> Result<()> {","type":"add"},{"content":"    let mut interval = time::interval(Duration::from_millis(1000));\n    let mut previous_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n    let out_filename = format!(\"{}\", Utc::now());\n    let mut out_file = OpenOptions::new()\n        .write(true)\n        .append(true)\n        .create(true)\n        .open(out_filename)\n        .unwrap();\n\n    loop {\n        interval.tick().await;\n        let current_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n        let changeset = Changeset::new(&previous_contents, &current_contents, \"\\n\");\n        if changeset.distance > 0 {\n            writeln!(out_file, \"{}\", diffs_to_json(&changeset.diffs));\n        }\n        previous_contents = current_contents;\n    }\n}\n","type":"same"}],
[{"content":"extern crate chrono;\nextern crate difference;\nextern crate serde_json;\nextern crate tokio;\n\nuse chrono::Utc;\nuse difference::{Changeset, Difference};\nuse serde_json::json;\nuse std::fs;\nuse std::fs::OpenOptions;\nuse std::io::Write;\nuse std::time::Duration;\nuse tokio::time;\n\nfn diffs_to_json(diffs: &Vec<Difference>) -> String {\n    let mut values = Vec::new();\n    for diff in diffs {\n        let (type_, content) = match diff {\n            Difference::Add(c) => (\"add\", c),\n            Difference::Rem(c) => (\"remove\", c),\n            Difference::Same(c) => (\"same\", c),\n        };\n        let val = json!({\n           \"type\": type_,\n           \"content\": content\n        });\n        values.push(val.to_string());\n    }\n    format!(\"[{}]\", values.join(\",\"))\n}\n\n#[tokio::main]","type":"same"},{"content":"async fn main() -> Result<()> {","type":"remove"},{"content":"async fn main() -> Result<(), io::Error> {","type":"add"},{"content":"    let mut interval = time::interval(Duration::from_millis(1000));\n    let mut previous_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n    let out_filename = format!(\"{}\", Utc::now());\n    let mut out_file = OpenOptions::new()\n        .write(true)\n        .append(true)\n        .create(true)\n        .open(out_filename)\n        .unwrap();\n\n    loop {\n        interval.tick().await;\n        let current_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n        let changeset = Changeset::new(&previous_contents, &current_contents, \"\\n\");\n        if changeset.distance > 0 {","type":"same"},{"content":"            writeln!(out_file, \"{}\", diffs_to_json(&changeset.diffs));","type":"remove"},{"content":"            writeln!(out_file, \"{}\", diffs_to_json(&changeset.diffs))?;","type":"add"},{"content":"        }\n        previous_contents = current_contents;\n    }\n}\n","type":"same"}],
[{"content":"extern crate chrono;\nextern crate difference;\nextern crate serde_json;\nextern crate tokio;\n\nuse chrono::Utc;\nuse difference::{Changeset, Difference};\nuse serde_json::json;","type":"same"},{"content":"use std::fs;","type":"remove"},{"content":"use std::{fs, io};","type":"add"},{"content":"use std::fs::OpenOptions;\nuse std::io::Write;\nuse std::time::Duration;\nuse tokio::time;\n\nfn diffs_to_json(diffs: &Vec<Difference>) -> String {\n    let mut values = Vec::new();\n    for diff in diffs {\n        let (type_, content) = match diff {\n            Difference::Add(c) => (\"add\", c),\n            Difference::Rem(c) => (\"remove\", c),\n            Difference::Same(c) => (\"same\", c),\n        };\n        let val = json!({\n           \"type\": type_,\n           \"content\": content\n        });\n        values.push(val.to_string());\n    }\n    format!(\"[{}]\", values.join(\",\"))\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), io::Error> {\n    let mut interval = time::interval(Duration::from_millis(1000));\n    let mut previous_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n    let out_filename = format!(\"{}\", Utc::now());\n    let mut out_file = OpenOptions::new()\n        .write(true)\n        .append(true)\n        .create(true)\n        .open(out_filename)\n        .unwrap();\n\n    loop {\n        interval.tick().await;\n        let current_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n        let changeset = Changeset::new(&previous_contents, &current_contents, \"\\n\");\n        if changeset.distance > 0 {\n            writeln!(out_file, \"{}\", diffs_to_json(&changeset.diffs))?;\n        }\n        previous_contents = current_contents;\n    }\n}\n","type":"same"}],
[{"content":"extern crate chrono;\nextern crate difference;\nextern crate serde_json;\nextern crate tokio;\n\nuse chrono::Utc;\nuse difference::{Changeset, Difference};\nuse serde_json::json;\nuse std::{fs, io};\nuse std::fs::OpenOptions;\nuse std::io::Write;\nuse std::time::Duration;\nuse tokio::time;\n\nfn diffs_to_json(diffs: &Vec<Difference>) -> String {\n    let mut values = Vec::new();\n    for diff in diffs {\n        let (type_, content) = match diff {\n            Difference::Add(c) => (\"add\", c),\n            Difference::Rem(c) => (\"remove\", c),\n            Difference::Same(c) => (\"same\", c),\n        };\n        let val = json!({\n           \"type\": type_,\n           \"content\": content\n        });\n        values.push(val.to_string());\n    }\n    format!(\"[{}]\", values.join(\",\"))\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), io::Error> {\n    let mut interval = time::interval(Duration::from_millis(1000));\n    let mut previous_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n    let out_filename = format!(\"{}\", Utc::now());\n    let mut out_file = OpenOptions::new()\n        .write(true)\n        .append(true)\n        .create(true)\n        .open(out_filename)\n        .unwrap();\n\n    loop {\n        interval.tick().await;\n        let current_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n        let changeset = Changeset::new(&previous_contents, &current_contents, \"\\n\");\n        if changeset.distance > 0 {\n            writeln!(out_file, \"{}\", diffs_to_json(&changeset.diffs))?;\n        }\n        previous_contents = current_contents;\n    }","type":"same"},{"content":"    Ok(())","type":"add"},{"content":"}\n","type":"same"}],
[{"content":"extern crate chrono;\nextern crate difference;\nextern crate serde_json;\nextern crate tokio;\n\nuse chrono::Utc;\nuse difference::{Changeset, Difference};\nuse serde_json::json;\nuse std::{fs, io};\nuse std::fs::OpenOptions;\nuse std::io::Write;\nuse std::time::Duration;\nuse tokio::time;\n\nfn diffs_to_json(diffs: &Vec<Difference>) -> String {\n    let mut values = Vec::new();\n    for diff in diffs {\n        let (type_, content) = match diff {\n            Difference::Add(c) => (\"add\", c),\n            Difference::Rem(c) => (\"remove\", c),\n            Difference::Same(c) => (\"same\", c),\n        };\n        let val = json!({\n           \"type\": type_,\n           \"content\": content\n        });\n        values.push(val.to_string());\n    }\n    format!(\"[{}]\", values.join(\",\"))\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), io::Error> {\n    let mut interval = time::interval(Duration::from_millis(1000));\n    let mut previous_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n    let out_filename = format!(\"{}\", Utc::now());\n    let mut out_file = OpenOptions::new()\n        .write(true)\n        .append(true)\n        .create(true)\n        .open(out_filename)\n        .unwrap();\n\n    loop {\n        interval.tick().await;\n        let current_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n        let changeset = Changeset::new(&previous_contents, &current_contents, \"\\n\");\n        if changeset.distance > 0 {\n            writeln!(out_file, \"{}\", diffs_to_json(&changeset.diffs))?;\n        }\n        previous_contents = current_contents;\n    }","type":"same"},{"content":"    Ok(())","type":"remove"},{"content":"}\n","type":"same"}],
[{"content":"extern crate chrono;\nextern crate difference;\nextern crate serde_json;\nextern crate tokio;\n\nuse chrono::Utc;\nuse difference::{Changeset, Difference};\nuse serde_json::json;\nuse std::{fs, io};\nuse std::fs::OpenOptions;\nuse std::io::Write;\nuse std::time::Duration;\nuse tokio::time;\n\nfn diffs_to_json(diffs: &Vec<Difference>) -> String {\n    let mut values = Vec::new();\n    for diff in diffs {\n        let (type_, content) = match diff {\n            Difference::Add(c) => (\"add\", c),\n            Difference::Rem(c) => (\"remove\", c),\n            Difference::Same(c) => (\"same\", c),\n        };\n        let val = json!({\n           \"type\": type_,\n           \"content\": content\n        });\n        values.push(val.to_string());\n    }\n    format!(\"[{}]\", values.join(\",\"))\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), io::Error> {\n    let mut interval = time::interval(Duration::from_millis(1000));\n    let mut previous_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");","type":"same"},{"content":"    let out_filename = format!(\"{}\", Utc::now());","type":"remove"},{"content":"    let out_filename = format!(\"{}-out.json\", Utc::now());","type":"add"},{"content":"    let mut out_file = OpenOptions::new()\n        .write(true)\n        .append(true)\n        .create(true)\n        .open(out_filename)\n        .unwrap();\n\n    loop {\n        interval.tick().await;\n        let current_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n        let changeset = Changeset::new(&previous_contents, &current_contents, \"\\n\");\n        if changeset.distance > 0 {\n            writeln!(out_file, \"{}\", diffs_to_json(&changeset.diffs))?;\n        }\n        previous_contents = current_contents;\n    }\n}\n","type":"same"}],
[{"content":"extern crate chrono;\nextern crate difference;\nextern crate serde_json;\nextern crate tokio;\n\nuse chrono::Utc;\nuse difference::{Changeset, Difference};\nuse serde_json::json;\nuse std::{fs, io};\nuse std::fs::OpenOptions;\nuse std::io::Write;\nuse std::time::Duration;\nuse tokio::time;\n\nfn diffs_to_json(diffs: &Vec<Difference>) -> String {\n    let mut values = Vec::new();\n    for diff in diffs {\n        let (type_, content) = match diff {\n            Difference::Add(c) => (\"add\", c),\n            Difference::Rem(c) => (\"remove\", c),\n            Difference::Same(c) => (\"same\", c),\n        };\n        let val = json!({\n           \"type\": type_,\n           \"content\": content\n        });\n        values.push(val.to_string());\n    }\n    format!(\"[{}]\", values.join(\",\"))\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), io::Error> {\n    let mut interval = time::interval(Duration::from_millis(1000));\n    let mut previous_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");","type":"same"},{"content":"    let out_filename = format!(\"{}-out.json\", Utc::now());","type":"remove"},{"content":"    let out_filename = format!(\"out/{}.json\", Utc::now());","type":"add"},{"content":"    let mut out_file = OpenOptions::new()\n        .write(true)\n        .append(true)\n        .create(true)\n        .open(out_filename)\n        .unwrap();\n\n    loop {\n        interval.tick().await;\n        let current_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n        let changeset = Changeset::new(&previous_contents, &current_contents, \"\\n\");\n        if changeset.distance > 0 {\n            writeln!(out_file, \"{}\", diffs_to_json(&changeset.diffs))?;\n        }\n        previous_contents = current_contents;\n    }\n}\n","type":"same"}],
[{"content":"extern crate chrono;\nextern crate difference;\nextern crate serde_json;\nextern crate tokio;\n\nuse chrono::Utc;\nuse difference::{Changeset, Difference};\nuse serde_json::json;\nuse std::{fs, io};\nuse std::fs::OpenOptions;\nuse std::io::Write;\nuse std::time::Duration;\nuse tokio::time;\n\nfn diffs_to_json(diffs: &Vec<Difference>) -> String {\n    let mut values = Vec::new();\n    for diff in diffs {\n        let (type_, content) = match diff {\n            Difference::Add(c) => (\"add\", c),\n            Difference::Rem(c) => (\"remove\", c),\n            Difference::Same(c) => (\"same\", c),\n        };\n        let val = json!({\n           \"type\": type_,\n           \"content\": content\n        });\n        values.push(val.to_string());\n    }\n    format!(\"[{}]\", values.join(\",\"))\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), io::Error> {\n    let mut interval = time::interval(Duration::from_millis(1000));\n    let mut previous_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");","type":"same"},{"content":"    let out_filename = format!(\"out/{}.json\", Utc::now());","type":"remove"},{"content":"    let out_filename = format!(\"outfiles/{}.json\", Utc::now());","type":"add"},{"content":"    let mut out_file = OpenOptions::new()\n        .write(true)\n        .append(true)\n        .create(true)\n        .open(out_filename)\n        .unwrap();\n\n    loop {\n        interval.tick().await;\n        let current_contents = fs::read_to_string(\"src/main.rs\").expect(\"Something went wrong\");\n        let changeset = Changeset::new(&previous_contents, &current_contents, \"\\n\");\n        if changeset.distance > 0 {\n            writeln!(out_file, \"{}\", diffs_to_json(&changeset.diffs))?;\n        }\n        previous_contents = current_contents;\n    }\n}\n","type":"same"}]]
