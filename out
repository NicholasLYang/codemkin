[
[{"content":"const cache = [1, 1];\nconst fib_fast = n => {\n  if (cache[n] !== undefined) {\n     return cache[n]\n  }\n  const val = fib_fast(n - 1) + fib_fast(n - 2);\n  if (n > cache.length) {\n    cache.length = n;\n  }\n  cache[n] = val;\n  return val;\n}\n\nconst fib_slow = n => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib_slow(n - 1) + fib_slow(n - 2);\n}\n\nfor (let i = 1; i < 1000; i++) {\n  console.log(fib_fast(i));\n}\n\nfor (let i = 1; i < 100; i++) {\n  console.log(fib_slow(i));\n}\n","type":"same"},{"content":"\nconst fact = n => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * fact(n - 1);\n}","type":"add"}],
[{"content":"const cache = [1, 1];\nconst fib_fast = n => {\n  if (cache[n] !== undefined) {\n     return cache[n]\n  }\n  const val = fib_fast(n - 1) + fib_fast(n - 2);\n  if (n > cache.length) {\n    cache.length = n;\n  }\n  cache[n] = val;\n  return val;\n}\n\nconst fib_slow = n => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib_slow(n - 1) + fib_slow(n - 2);\n}\n\nfor (let i = 1; i < 1000; i++) {\n  console.log(fib_fast(i));\n}\n\nfor (let i = 1; i < 100; i++) {\n  console.log(fib_slow(i));\n}\n\n\nconst fact = n => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * fact(n - 1);\n}","type":"same"},{"content":"\nfact(100);","type":"add"}],
[{"content":"const cache = [1, 1];\nconst fib_fast = n => {\n  if (cache[n] !== undefined) {\n     return cache[n]\n  }\n  const val = fib_fast(n - 1) + fib_fast(n - 2);\n  if (n > cache.length) {\n    cache.length = n;\n  }\n  cache[n] = val;\n  return val;\n}\n\nconst fib_slow = n => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib_slow(n - 1) + fib_slow(n - 2);\n}\n","type":"same"},{"content":"for (let i = 1; i < 1000; i++) {\n  console.log(fib_fast(i));\n}","type":"remove"},{"content":"","type":"same"},{"content":"for (let i = 1; i < 100; i++) {\n  console.log(fib_slow(i));\n}\n\n","type":"remove"},{"content":"const fact = n => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * fact(n - 1);\n}\n\nfact(100);","type":"same"}],
[{"content":"const cache = [1, 1];\nconst fib_fast = n => {\n  if (cache[n] !== undefined) {\n     return cache[n]\n  }\n  const val = fib_fast(n - 1) + fib_fast(n - 2);\n  if (n > cache.length) {\n    cache.length = n;\n  }\n  cache[n] = val;\n  return val;\n}\n\nconst fib_slow = n => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib_slow(n - 1) + fib_slow(n - 2);\n}\n\n\nconst fact = n => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * fact(n - 1);\n}\n","type":"same"},{"content":"fact(100);","type":"remove"},{"content":"console.log(fact(100));","type":"add"}],
[{"content":"const cache = [1, 1];\nconst fib_fast = n => {\n  if (cache[n] !== undefined) {\n     return cache[n]\n  }\n  const val = fib_fast(n - 1) + fib_fast(n - 2);\n  if (n > cache.length) {\n    cache.length = n;\n  }\n  cache[n] = val;\n  return val;\n}\n\nconst fib_slow = n => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib_slow(n - 1) + fib_slow(n - 2);\n}\n\n\nconst fact = n => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * fact(n - 1);\n}\n","type":"same"},{"content":"console.log(fact(100));","type":"remove"},{"content":"console.log(fact(1000));","type":"add"}],
[{"content":"const cache = [1, 1];\nconst fib_fast = n => {\n  if (cache[n] !== undefined) {\n     return cache[n]\n  }\n  const val = fib_fast(n - 1) + fib_fast(n - 2);\n  if (n > cache.length) {\n    cache.length = n;\n  }\n  cache[n] = val;\n  return val;\n}\n\nconst fib_slow = n => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib_slow(n - 1) + fib_slow(n - 2);\n}\n\n\nconst fact = n => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * fact(n - 1);\n}\n","type":"same"},{"content":"console.log(fact(1000));","type":"remove"},{"content":"for (let i = 0; i < 100; i++) {\n  console.log(fact(i));\n}","type":"add"}]
]
